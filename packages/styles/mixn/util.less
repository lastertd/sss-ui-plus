@variablePrefix: sss;
@componentPrefix: s;


.with(@v, @r:{}) {
    &.@{v} {
        @r();
    }
}


.is(@s, @r:{}) {
    .is-@{s}& {
        @r();
    }
}


.d(@b, @r:{}, @ns:never) {
    & when (@ns = never) {
        .@{b} {
            @r();

        }
    }
    & when not (@ns = never) {
        .@{ns}-@{b} {
            @r();
        }
    }

}


.b(@b, @r:{}, @ns:never) {
    & when not (@ns = never) {
        .@{ns}-@{b} {
            @r();
        }
    }
    & when (@ns = never) {
        &-@{b} {
            @r();
        }
    }

}

.e(@e, @r:{}, @ns:never) {
    & when not (@ns = never) {
        .@{ns}__@{e} {
            @r();
        }
    }
    & when (@ns = never) {
        &__@{e} {
            @r();
        }
    }

}


.m(@m, @r:{}, @ns:never) when (isruleset(@r)) {
    & when not (@ns = never) {
        .@{ns}--@{m} {
            @r();
        }
    }
    & when (@ns = never) {
        &--@{m} {
            @r();
        }
    }

}

.m(@m1, @m2, @r:{}, @ns:never) when (isruleset(@r)) {
    & when not (@ns = never) {
        .@{ns}--@{m1}.@{ns}--@{m2} {
            @r();
        }
    }
    & when (@ns = never) {
        &--@{m1}&--@{m2} {
            @r();
        }
    }
}


.bm(@b, @m, @r:{}) {
    &-@{b}--@{m} {
        @r();
    }
}

.be(@b, @e, @r:{}) {
    &-@{b}__@{e} {
        @r();
    }
}

.em(@e, @m, @r:{}) {
    &__@{e}--@{m} {
        @r();
    }
}


.mIs(@modifier, @status, @rules:{}) {
    &--@{modifier}.is-@{status} {
        @rules();
    }
}


