@import "../mixn/_index";


.@{componentPrefix}-link {
    @ns: @{componentPrefix}-link;
    @types: primary, info, warning, danger;


    & {
        --sss-link-font-color: var(--sss-color-cyan);
        --sss-link-bg-color: var(--sss-color-cyan-light);
    }

    //base
    & {
        .useIFlexRCC(3);

        cursor: pointer;
        text-decoration: none;

        color: var(--sss-link-font-color);

        &:hover,
        &:focus {
            --sss-link-font-color: var(--sss-color-cyan-light);
        }

        &:active {
            --sss-link-font-color: var(--sss-color-cyan-dark);
        }

        &:after {
            background-color: var(--sss-link-bg-color);
        }
    }


    //types

    each(@types, .(@type) {
        .m(@type, {
            --sss-link-font-color: getClrVar(@type);
            &:hover,
            &:focus {
                --sss-link-font-color: getClrVar(@type, light);
            }
            &:active {
                --sss-link-font-color: getClrVar(@type, dark);;
            }
            &:after {
                --sss-link-bg-color: getClrVar(@type, light);
            }
        })
    });


    //disabled
    .is(disabled, {
        --sss-link-font-color: var(--sss-color-cyan);
        &:after {
            --sss-link-bg-color: transparent;
        }

    });
    each(@types, .(@type) {
        .mIs(@type, disabled, {
            --sss-link-font-color: getClrVar(@type);
            &:after {
                --sss-link-bg-color: transparent;
            }
        });

    });
}

