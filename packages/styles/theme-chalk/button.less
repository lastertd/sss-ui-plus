@import "../mixn/_index";

@plugin "../plugin/index";


.@{componentPrefix}-button {
    @ns: @{componentPrefix}-button;
    @typeList: primary, success, info, warning, danger, cyan;
    @sizeSet: {
        small: .useSizeSmall(0);
        normal: .useSizeDft(0);
        large: .useSizeLarge(0);
    }

    @themeList: ghost, fantasy, empty;
    @notAllowed: disabled, loading;

    //mixin of notAllowed
    .notAllowedMixin(@color, @bg, @br) {
        &,
        &:hover,
        &:focus,
        &:active {
            --sss-button-font-color: @color;
            --sss-button-bg-color: @bg;
            --sss-button-br-color: @br;
        }

    }

    //var
    & {
        --sss-button-font-color: inherit;
        --sss-button-bg-color: var(--sss-color-bg);
        --sss-button-br-color: var(--sss-color-gray);
    }

    //base
    & {
        .useIFlexRCC(4);
        .useSizeDft(0);
        .useBorderBox();
        .useBorderRadius(5);

        transition: all .15s;
        user-select: none;
        border: solid 1px;
        outline: none;

        color: var(--sss-button-font-color);
        background-color: var(--sss-button-bg-color);
        border-color: var(--sss-button-br-color);


        &:hover,
        &:focus {
            --sss-button-font-color: var(--sss-color-primary);
        }

        &:hover {
            --sss-button-bg-color: var(--sss-color-gray-deep-fade);;
        }

        &:active {
            --sss-button-br-color: var(--sss-color-primary);
        }
    }

    //modifier types
    each(@typeList, .(@type) {
        .m(@type, {

            --sss-button-font-color: getClrVar(white);
            --sss-button-bg-color: getClrVar(@type);

            &:hover,
            &:focus {
                --sss-button-font-color: getClrVar(white);
                --sss-button-bg-color: getClrVar(@type, light);
            }

            &:active {
                --sss-button-bg-color: getClrVar(@type, dark);
            }
        })

    })

    //modifier empty theme
    .m(ghost, {
        --sss-button-bg-color: var(--sss-color-bg);
        &:hover,
        &:focus {
            --sss-button-font-color: var(--sss-color-black);
            --sss-button-bg-color: var(--sss-color-bg);
        }
        &:active {
            --sss-button-br-color: var(--sss-color-gray-dark)
        }
    });
    each(@typeList, .(@type) {
        .mWith(empty, bm(@ns, @type), {
            --sss-button-bg-color: var(--sss-color-bg);
            --sss-button-font-color: getClrVar(@type);
            --sss-button-br-color: var(--sss-color-gray);
            &:active {
                --sss-button-br-color: getClrVar(@type, dark);
            }
        });
    })

    //modifier fantasy theme
    .m(fantasy, {
        &:focus {
            --sss-button-bg-color: var(--sss-color-gray-fade);
        }
    });
    each(@typeList, .(@type) {
        .mWith(fantasy, bm(@ns, @type), {
            --sss-button-font-color: getClrVar(@type);
            --sss-button-bg-color: getClrVar(@type, fade);
            --sss-button-br-color: getClrVar(@type, lighter);

            &:hover,
            &:focus {
                --sss-button-font-color: var(--sss-color-white);
                --sss-button-bg-color: getClrVar(@type);
            }

            &:active {
                --sss-button-bg-color: getClrVar(@type, dark);
            }
        });
    })

    //modifier ghost theme
    .m(ghost, {
        --sss-button-br-color: transparent;
        --sss-button-bg-color: transparent;
        --sss-button-font-color: var(--sss-color-black-light);
        &:hover,
        &:focus {
            color: var(--sss-color-black-light);
            --sss-button-bg-color: var(--sss-color-gray-fade);

        }
        &:active {
            --sss-button-br-color: transparent;
            --sss-button-font-color: var(--sss-color-black-dark);
        }
    });
    each(@typeList, .(@type) {
        .mWith(ghost, bm(@ns, @type), {
            --sss-button-br-color: transparent;
            --sss-button-font-color: getClrVar(@type);
            --sss-button-bg-color: transparent;

            &:hover,
            &:focus {
                --sss-button-font-color: getClrVar(@type, light);
                --sss-button-bg-color: getClrVar(@type, fade);
            }

            &:active {
                --sss-button-font-color: getClrVar(@type, dark);
            }
        });
    })


    //status disabled & loading
    each(@notAllowed, .(@status) {
        .is(@status, {
            .notAllowedMixin(getClrVar(black), getClrVar(bg), getClrVar(gray));
        });

        each(@typeList, .(@type) {
            .m(@type, {
               .is(@status, {
                   .notAllowedMixin(getClrVar(white), getClrVar(@type), getClrVar(gray));
               });
            });
            .mWith(@type, bm(@ns, empty), {
                .is(@status, {
                    .notAllowedMixin(getClrVar(@type),getClrVar(bg), getClrVar(gray));
                })
            });
            .mWith(@type, bm(@ns, ghost), {
                .is(@status, {
                    .notAllowedMixin(getClrVar(@type), getClrVar(bg), transparent);

                })
            });
            .mWith(@type, bm(@ns, fantasy), {
                .is(@status, {
                    .notAllowedMixin(getClrVar(@type), getClrVar(@type, fade), getClrVar(gray));
                })
            });

        });


        .m(ghost, {
            .is(@status, {
                .notAllowedMixin(unset, var(--sss-color-bg), transparent);
            })
        });


    });


    //modifier size
    each(@sizeSet, .(@rule, @key) {
        .m(@key, {
            @rule();
        });

    });
}




