@import "../mixn/_index";

@plugin "../plugin/index";


& {
    @ns: @{componentPrefix}-button;
    @typeList: primary, success, info, warning, danger, cyan;
    @sizeSet: {
        small: .useSizeSmall(0);
        normal: .useSizeDft(0);
        large: .useSizeLarge(0);
    }

    @themeList: ghost, fantasy, empty;


    .d(@ns, {
        .useIFlexRCC(4);
        .useBorderDft();
        .useSizeDft(0);
        .useBorderRadius(5);

        transition: all .15s;
        user-select: none;

        color: var(--sss-color-black);
        background-color: var(--sss-color-bg);
        border-color: var(--sss-color-gray);

        &:hover,
        &:focus {
            background-color: var(--sss-color-gray-fade);
            color: var(--sss-color-primary);
        }
        &:active {
            border-color: var(--sss-color-primary);
        }

        //disabled & loading
        each(disabled loading, .(@status) {
            .is(@status, {
                &,
                &:hover,
                &:focus,
                &:active {
                    color: var(--sss-color-black);
                    background-color: var(--sss-color-bg);
                    border-color: var(--sss-color-gray);
                }
            });

        })
    });


    //ghost theme default
    .d(bm(@ns, ghost), {
        border-color: transparent;
        background-color: transparent;
        color: var(--sss-color-black-light);
        &:hover,
        &:focus {
            color: var(--sss-color-black-light);
            background-color: var(--sss-color-gray-fade);

        }
        &:active {
            border-color: transparent;
            color: var(--sss-color-black-dark);


        }

        //disabled & loading
        each(disabled loading, .(@status) {
            .is(@status, {
                &,
                &:hover,
                &:focus,
                &:active {
                    border-color: transparent;
                    background-color: transparent;
                    color: var(--sss-color-black-light);
                }
            });

        })
    });

    //empty theme default
    .d(bm(@ns, empty), {
        background-color: var(--sss-color-bg);

        &:hover,
        &:focus {
            color: var(--sss-color-black);
            background-color: var(--sss-color-bg);
        }
        &:active {
            border-color: var(--sss-color-gray-dark)
        }
    });


    each(@typeList, .(@type) {

        .d(bm(@ns, @type), {

            color: getClrVar(white);
            background-color: getClrVar(@type);

            &:hover,
            &:focus {
                color: getClrVar(white);
                background-color: getClrVar(@type, light);
            }

            &:active {
                background-color: getClrVar(@type, dark);
            }

            //disabled & loading
            each(disabled loading, .(@status) {
                .is(@status, {
                    &,
                    &:hover,
                    &:focus,
                    &:active {
                        color: var(--sss-color-white);
                        background-color: getClrVar(@type);
                        border-color: var(--sss-color-gray);
                    }
                });

            })


        });


        //ghost theme
        .with(bm(@ns, @type), bm(@ns, ghost), {
            border-color: transparent;
            color: getClrVar(@type);
            background-color: transparent;

            &:hover,
            &:focus {
                color: getClrVar(@type, light);
                background-color: getClrVar(@type, fade);
            }

            &:active {
                color: getClrVar(@type, dark);
            }
            //disabled & loading
            each(disabled loading, .(@status) {
                .is(@status, {
                    &,
                    &:hover,
                    &:focus,
                    &:active {
                        color: getClrVar(@type, light);
                        background-color: getClrVar(@type, fade);
                        border-color: transparent;
                    }
                });

            })
        });

        //empty theme
        .with(bm(@ns, @type), bm(@ns, empty), {
            background-color: var(--sss-color-bg);
            color: getClrVar(@type);
            border-color: var(--sss-color-gray);
            &:active {
                border-color: getClrVar(@type, dark);
            }
            //disabled & loading
            each(disabled loading, .(@status) {
                .is(@status, {
                    &,
                    &:hover,
                    &:focus,
                    &:active {
                        background-color: var(--sss-color-bg);
                        color: getClrVar(@type);
                        border-color: var(--sss-color-gray);
                    }
                });

            })
        });

        //fantasy theme
        .with(bm(@ns, @type), bm(@ns, fantasy), {
            color: getClrVar(@type);
            background-color: getClrVar(@type, fade);
            border-color: getClrVar(@type, lighter);

            &:hover,
            &:focus {
                color: var(--sss-color-white);
                background-color: getClrVar(@type);
            }

            &:active {
                background-color: getClrVar(@type, dark);
            }

            //disabled & loading
            each(disabled loading, .(@status) {
                .is(@status, {
                    &,
                    &:hover,
                    &:focus,
                    &:active {
                        color: getClrVar(@type);
                        background-color: getClrVar(@type, fade);
                        border-color: getClrVar(@type, lighter);
                    }
                });

            })
        });
    });


    each(@sizeSet, {
        @size: @key;
        @r: @value;
        .d(bm(@ns, @size), {
            @r();
        })
    });


}



