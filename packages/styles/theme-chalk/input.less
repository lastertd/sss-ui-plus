@import "../mixn/_index";

@plugin "../plugin/index";


& {
    @ns: @{componentPrefix}-input;
    @sizes: small, large;




    //block base
    .d(@ns, {
        .useIFlexRCC(0);
        align-items: stretch; //子元素撑满高度


        .useBorderRadius(5);
        .useBorderDft();
        .useSizeDft(0, 0);


        user-select: none;


        width: 100%;
        transition: all .3s;
        &:focus-within {
            border: solid 1px var(--sss-color-primary);
            box-shadow: 0 0 5px 0 var(--sss-color-primary-light);
        }

        &:hover {
            border: solid 1px var(--sss-color-gray-dark);

            .sss-input-icon-close {
                display: inline-block;
            }
        }


    });

    //element wrapper
    .d(be(@ns, wrapper), {
        .useIFlexRCC(7);
        align-items: stretch;

        width: 100%;
        padding: 0 7px;


    });




    //element inner
    .d(be(@ns, inner), {
        flex: 1;

        border: none;
        background: transparent;
        border-radius: inherit;

        min-width: 100px;
        font-size: inherit;
        padding: 0;


        &:focus {
            outline: none;
        }

        &::placeholder {
            color: var(--sss-color-gray);
        }

        &[type="password"]::-ms-reveal {
            display: none !important;

        }
    });

    //element icon
    .d(be(@ns, icon), {
        flex: 0;
        color: var(--sss-color-gray-dark);
        height: 100%;

        &--limit {
            display: flex;
            align-items: center;
            white-space: nowrap;
            gap: 3px;
            font-size: var(--sss-font-size-small);

            &[data-overflow = 'true'] {
                color: red;
            }

        }

    });

    .d(be(@ns, slot), {
        display: flex;
        align-items: center;

        padding: 0 15px;
        background-color: var(--sss-color-gray-deep-fade);

        border-top-left-radius: inherit;
        border-bottom-left-radius: inherit;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-right: inherit;

        .m(suffix, {
            border-right: unset;
            border-left: inherit;
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
            border-top-right-radius: inherit;
            border-bottom-right-radius: inherit;
        });


    });



    //modifier size
    each(@sizes, .(@size) {
        .d(bm(@ns, @size), {
            & when (@size = small) {
                .useSizeSmall(0, 0);
            }
            & when (@size = large) {
                .useSizeLarge(0, 0);
            }
        })
    });

}








